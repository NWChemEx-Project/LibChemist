/*
* This file was autogenerated by generate_mols.py.  Any edits to it will be
* lost the next time it is generated.
*/

#include "LibChemist/Implementations/MoleculeManagerPIMPL.hpp"

namespace LibChemist::detail_ {

class HardCodedMolsPIMPL : public MoleculeManagerPIMPL {
public:
    using MoleculeManagerPIMPL::MoleculeManagerPIMPL;

protected:
    HardCodedMolsPIMPL(const HardCodedMolsPIMPL& rhs) = default;    

private:    
    unique_pimpl clone_() const override {
        using unique_me = std::unique_ptr<HardCodedMolsPIMPL>;
        return unique_me(new HardCodedMolsPIMPL(*this));
    }
    
    value_type at_(const key_type& name) const override {
        using cart_t = typename Atom::coord_type;
        using mass_t = typename Atom::mass_type;
        if(name == "water") {
            return Molecule(
                Atom{mass_t(ptable_.get_atom(8).mass()), 8ul,
                    cart_t{ 0.0, -0.14322234298078537, 0.0}},
                Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                    cart_t{ 1.6380335020342398, 1.1365568803584094, 0.0}},
                Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                    cart_t{ -1.6380335020342398, 1.1365568803584094, 0.0}}
            );
        }
        else throw std::out_of_range("Unknown molecule name");
    } // end at_
};  // end HardCodedMolsPIMPL
    
std::unique_ptr<MoleculeManagerPIMPL> nwx_default_mols() {
    return std::make_unique<HardCodedMolsPIMPL>();
}
    
} // namespace LibChemist::detail_
