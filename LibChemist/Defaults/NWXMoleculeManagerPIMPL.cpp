/*
 * This file was autogenerated by generate_mols.py. Any edits to it will be
 * lost the next time it is generated.
 */

#include "LibChemist/Implementations/MoleculeManagerPIMPL.hpp"

namespace LibChemist::detail_ {

class HardCodedMolsPIMPL : public MoleculeManagerPIMPL {
public:
    using MoleculeManagerPIMPL::MoleculeManagerPIMPL;

protected:
    HardCodedMolsPIMPL(const HardCodedMolsPIMPL& rhs) = default;

private:
    unique_pimpl clone_() const override {
        using unique_me = std::unique_ptr<HardCodedMolsPIMPL>;
        return unique_me(new HardCodedMolsPIMPL(*this));
    }

    value_type at_(const key_type& name) const override {
        using cart_t = typename Atom::coord_type;
        using mass_t = typename Atom::mass_type;
        if(name == "tetrahydrofuran") {
            return Molecule(
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{0.2961, 2.4598, -0.0068}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{-2.1444, 0.9137, 0.1039}},
                        Atom{mass_t(ptable_.get_atom(8).mass()), 8ul,
                             cart_t{-1.5447, -1.6881, -0.1905}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{1.0998, -2.0551, 0.1041}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{2.4239, 0.5125, -0.0119}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{0.4431, 3.7681, 1.6136}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{0.3581, 3.667, -1.7096}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-3.4848, 1.3483, -1.4292}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-3.1524, 1.1278, 1.9181}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{1.6509, -3.3546, -1.4267}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{1.4029, -3.0366, 1.9198}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{3.6128, 0.6814, -1.7202}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{3.7216, 0.7742, 1.6025}});
        } else if(name == "acetic_acid") {
            return Molecule(
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{3.7668, -0.1315, 1.3443}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{2.763, -0.257, -0.4669}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{3.3962, 1.3245, -1.6514}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{3.328, -2.0231, -1.3954}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{-0.0365, -0.1597, -0.0729}},
                        Atom{mass_t(ptable_.get_atom(8).mass()), 8ul,
                             cart_t{-1.6355, -1.7181, -0.63}},
                        Atom{mass_t(ptable_.get_atom(8).mass()), 8ul,
                             cart_t{-0.9025, 1.9649, 1.0643}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-2.6908, 1.8789, 1.2438}});
        } else if(name == "methane") {
            return Molecule(
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{-1.46289, 0.24657, -3.42885}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{0.55911, 0.24657, -3.42885}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-2.3009, -0.94658, -4.82979}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-2.13394, 2.13861, -3.67032}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-2.02137, -0.51438, -1.64069}});
        } else if(name == "benzene") {
            return Molecule(
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-0.40559, 1.84884, 0.62618}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{-0.72423, 1.2532, -1.32911}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{-2.97729, 0.07236, -1.99271}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-4.43165, -0.26142, -0.55992}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{-3.38227, -0.6847, -4.4774}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-5.15513, -1.61406, -4.99955}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{-1.53445, -0.26095, -6.29861}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-1.85317, -0.8567, -8.25379}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{0.71858, 0.91978, -5.63498}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{2.17272, 1.25301, -7.06801}},
                        Atom{mass_t(ptable_.get_atom(6).mass()), 6ul,
                             cart_t{1.12363, 1.67688, -3.15031}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{2.89648, 2.60603, -2.62803}});
        } else if(name == "water") {
            return Molecule(
                        Atom{mass_t(ptable_.get_atom(8).mass()), 8ul,
                             cart_t{0.0, -0.14322234298078, 0.0}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{1.63803350203424, 1.1365568803584, 0.0}},
                        Atom{mass_t(ptable_.get_atom(1).mass()), 1ul,
                             cart_t{-1.63803350203424, 1.1365568803584, 0.0}});
        } else 
throw std::out_of_range("Unknown molecule name");
    } // end at_
};    // end HardCodedMolsPIMPL

std::unique_ptr<MoleculeManagerPIMPL> nwx_default_mols() {
    return std::make_unique<HardCodedMolsPIMPL>();
}

} // namespace LibChemist::detail_
